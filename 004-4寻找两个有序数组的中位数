https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/
给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。
示例 1:
nums1 = [1, 3]
nums2 = [2]
则中位数是 2.0
示例 2:
nums1 = [1, 2]
nums2 = [3, 4]
则中位数是 (2 + 3)/2 = 2.5
博客：https://www.jianshu.com/p/9bd57fd52062

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int len = nums1.size() + nums2.size();
        if ((len & 0x01)==0) {//偶数
            return (findKth(nums1, nums2, 0, nums1.size(), 0, nums2.size(), len / 2)
                + findKth(nums1, nums2, 0, nums1.size(), 0, nums2.size(), len / 2 + 1)
                ) / 2.0f;
        }
        else {
            return findKth(nums1, nums2, 0, nums1.size(), 0, nums2.size(), len / 2 + 1);
        }
    }
    double findKth(vector<int>& nums1, vector<int>& nums2,int start1,int len1,int start2,int len2,int k){//寻找第k小的数
        if(len1>len2) return findKth(nums2,nums1,start2,len2,start1,len1,k);
        if(len1==0) return nums2[start2+k-1];
        if(k==1) return min(nums1[start1],nums2[start2]);
        int p1=min(len1,max(k/2,1));//对p1进行二分查找
        int p2=k-p1;
        if(nums1[start1+p1-1]==nums2[start2+p2-1])
            return nums1[start1+p1-1];
        else if(nums1[start1+p1-1]>nums2[start2+p2-1])
            return findKth(nums1,nums2,start1,len1,start2+p2,len2-p2,k-p2);
        else return findKth(nums1,nums2,start1+p1,len1-p1,start2,len2,k-p1);
    }
};
