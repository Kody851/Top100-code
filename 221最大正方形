https://leetcode-cn.com/problems/maximal-square/
在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。
示例:
输入: 
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
输出: 4

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        int m=matrix.size(),n=matrix[0].size();
        //dp[i][j]表示以matrixdp[i][j]为正方形右下角的最大正方形边长
        vector<vector<int>>dp(m,vector<int>(n,0));
        int max=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]=='1'){
                    if(i==0||j==0) dp[i][j]=1;//处于第0行或第0列的，边长只可能是1或0
                    else dp[i][j]=min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))+1;//与之相邻的坐标最小的那个，加1
                }
                else dp[i][j]=0;//该位置是‘0’，肯定边长是0
                if(dp[i][j]>max) max=dp[i][j];
            }
        }
        return max*max;
    }
};
