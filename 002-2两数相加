Add Two Numbers    （作业帮三面）
https://leetcode-cn.com/problems/add-two-numbers/
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        ListNode*res=new ListNode(-1);
        ListNode *cur1=l1, *cur2=l2, *cur=res;
        int carry=0;
        while(cur1&&cur2){
            cur->next=new ListNode((cur1->val+cur2->val+carry)%10);
            carry=(cur1->val+cur2->val+carry)/10;
            cur1=cur1->next;
            cur2=cur2->next;
            cur=cur->next;
        }
        while(cur1){
            cur->next=new ListNode((cur1->val+carry)%10);
            carry=(cur1->val+carry)/10;
            cur1=cur1->next;
            cur=cur->next;
        }
        while(cur2){
            cur->next=new ListNode((cur2->val+carry)%10);
            carry=(cur2->val+carry)/10;
            cur2=cur2->next;
            cur=cur->next;
        }
        if(carry){
            cur->next=new ListNode(carry);//注意(5)+(7)=(1->2)这种情况
            cur->next->next=NULL;
        }
        return res->next;
    }
};
当有链表到尽头时，取值记为零，使代码更简洁
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        ListNode*res=new ListNode(-1);
        ListNode *cur1=l1, *cur2=l2, *cur=res;
        int carry=0;
        while(cur1||cur2){
            int x=cur1?cur1->val:0;
            int y=cur2?cur2->val:0;
            int sum=x+y+carry;
            cur->next=new ListNode(sum%10);
            carry=sum/10;
            if(cur1) cur1=cur1->next;
            if(cur2) cur2=cur2->next;
            cur=cur->next;
        }
        if(carry){
            cur->next=new ListNode(carry);
            cur->next->next=NULL;
        }
        return res->next;
    }
};
题目变式：https://www.cnblogs.com/grandyang/p/6216480.html
Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7
这道题是之前那道Add Two Numbers的拓展，我们可以看到这道题的最高位在链表首位置，如果我们给链表翻转一下的话就跟之前的题目一样了，
这里我们来看一些不修改链表顺序的方法。由于加法需要从最低位开始运算，而最低位在链表末尾，链表只能从前往后遍历，没法取到前面的元素，
那怎么办呢？我们可以利用栈来保存所有的元素，然后利用栈的后进先出的特点就可以从后往前取数字了，我们首先遍历两个链表，
将所有数字分别压入两个栈s1和s2中，我们建立一个值为0的res节点，然后开始循环，如果栈不为空，则将栈顶数字加入sum中，然后将res节点值赋为sum%10，
然后新建一个进位节点head，赋值为sum/10，如果没有进位，那么就是0，然后我们head后面连上res，将res指向head，这样循环退出后，
我们只要看res的值是否为0，为0返回res->next，不为0则返回res即可
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1, s2;
        while (l1) {
            s1.push(l1->val);
            l1 = l1->next;
        }
        while (l2) {
            s2.push(l2->val);
            l2 = l2->next;
        }
        int sum = 0;
        ListNode *res = new ListNode(0);
        while (!s1.empty() || !s2.empty()) {
            if (!s1.empty()) {sum += s1.top(); s1.pop();}
            if (!s2.empty()) {sum += s2.top(); s2.pop();}
            res->val = sum % 10;
            ListNode *head = new ListNode(sum / 10);
            head->next = res;
            res = head;
            sum /= 10;
        }
        return res->val == 0 ? res->next : res;
    }
};
